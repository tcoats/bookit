// Generated by CoffeeScript 1.10.0
var astro, buildtimeline, chrono, component, defaultnames, dom, hub, inject, moment, nicedate, odoql, ql, ref, route, shortdate, simpledate;

ref = require('odojs'), component = ref.component, hub = ref.hub, dom = ref.dom;

inject = require('injectinto');

moment = require('moment-timezone');

chrono = require('chronological');

moment = chrono(moment);

astro = require('./astro');

route = require('odo-route');

odoql = require('odoql/odojs');

component.use(odoql);

buildtimeline = require('./buildtimeline');

defaultnames = require('./defaultnames');

ql = require('odoql');

ql = ql.use('store');

nicedate = 'dddd D MMMM YYYY';

shortdate = 'ddd D MMMM';

simpledate = 'YYYY-MM-DD';

route('/booking/:id', function(p) {
  return {
    page: 'view',
    id: p.params.id
  };
});

inject.bind('page:view', component({
  query: function(state, params) {
    return {
      bookings: ql.store('bookings')
    };
  },
  render: function(state, params, hub) {
    var beginDeleteBooking, cancelChanges, cancelDeleteBooking, cancelRename, childparams, childstate, confirmDeleteBooking, e, edited, editing, evt, haschanges, id, keydown, keyup, ref1, ref2, rename, saveChanges, toggle;
    e = state.bookings.events[params.id];
    editing = (ref1 = params != null ? params.editing : void 0) != null ? ref1 : 'nothing';
    edited = params != null ? params.edited : void 0;
    if ((edited != null ? edited.id : void 0) !== params.id) {
      edited = {
        id: e.id,
        name: e.name,
        start: moment(e.start),
        end: moment(e.end)
      };
    }
    childparams = {
      selectedRange: {
        start: edited.start,
        end: edited.end
      }
    };
    childstate = {
      bookings: {
        events: {},
        timeline: null
      }
    };
    ref2 = state.bookings.events;
    for (id in ref2) {
      evt = ref2[id];
      if (id === params.id) {
        continue;
      }
      childstate.bookings.events[id] = evt;
    }
    childstate.bookings.timeline = buildtimeline(childstate.bookings.events);
    if (editing === 'start') {
      childparams.selectedDate = edited.start;
    } else if (editing === 'end') {
      childparams.selectedDate = edited.end;
    }
    haschanges = edited.name !== e.name || !edited.start.isSame(moment(e.start)) || !edited.end.isSame(moment(e.end));
    toggle = function(key) {
      return function(e) {
        var value;
        e.preventDefault();
        value = key;
        if (editing === value) {
          value = null;
        }
        return hub.emit('update', {
          editing: value
        });
      };
    };
    saveChanges = function(e) {
      e.preventDefault();
      return hub.emit('change booking', edited);
    };
    beginDeleteBooking = function(e) {
      e.preventDefault();
      return hub.emit('update', {
        deleting: true
      });
    };
    cancelDeleteBooking = function(e) {
      e.preventDefault();
      return hub.emit('update', {
        deleting: null
      });
    };
    confirmDeleteBooking = function(e) {
      e.preventDefault();
      return hub.emit('delete booking', edited);
    };
    cancelChanges = function(e) {
      e.preventDefault();
      return hub.emit('update', {
        edited: null,
        editing: null
      });
    };
    cancelRename = function(e) {
      e.preventDefault();
      return hub.emit('update', {
        editing: null
      });
    };
    keydown = function(e) {
      if (e.which === 13) {
        return e.preventDefault();
      }
    };
    keyup = function(e) {
      var name;
      name = e.target.value;
      name = name.replace(/[\r\n\v]+/g, '');
      e.target.value = name;
      return hub.emit('update', {
        name: name
      });
    };
    rename = function(e) {
      e.preventDefault();
      if ((params != null ? params.name : void 0) != null) {
        edited.name = params.name;
      }
      edited.name = edited.name.replace(/\s{2,}/g, ' ').trim();
      return hub.emit('update', {
        edited: edited,
        editing: null,
        name: null
      });
    };
    return dom('.grid.main', [
      dom('.scroll.right', astro(childstate, childparams, hub.child({
        select: function(p, cb) {
          cb();
          if (editing === 'start') {
            edited.start = p;
            if (edited.end.isBefore(edited.start)) {
              edited.end = edited.start;
            }
            return hub.emit('update', {
              edited: edited,
              editing: 'end'
            });
          } else if (editing === 'end') {
            edited.end = p;
            if (edited.start.isAfter(edited.end)) {
              edited.start = edited.end;
            }
            return hub.emit('update', {
              edited: edited,
              editing: null
            });
          }
        }
      }))), dom('.scroll', [
        params.deleting ? [
          dom('h2', edited.name), dom('.grid', [dom('.booking.selection', [dom('.booking-dates', [dom('small', 'ARRIVE'), ' ⋅ ', edited.start.format(nicedate)])]), dom('.booking.selection', [dom('.booking-dates', [dom('small', 'LEAVE'), ' ⋅ ', edited.end.format(nicedate)])])]), dom('.actions', [
            dom('a.action.danger', {
              onclick: confirmDeleteBooking,
              attributes: {
                href: '#'
              }
            }, '⌫  Delete'), dom('a.action', {
              onclick: cancelDeleteBooking,
              attributes: {
                href: '#'
              }
            }, '⤺  Cancel')
          ])
        ] : editing === 'name' ? [
          dom('textarea', {
            onkeydown: keydown,
            onkeyup: keyup,
            attributes: {
              autofocus: 'autofocus',
              name: 'name',
              autocomplete: 'off',
              autocorrect: 'off',
              autocapitalize: 'on',
              spellcheck: 'false'
            }
          }, edited.name), dom('ul.defaultnames', defaultnames.map(function(name) {
            var choosename;
            choosename = function(e) {
              e.preventDefault();
              edited.name = name;
              return hub.emit('update', {
                edited: edited,
                editing: null,
                name: null
              });
            };
            return dom('li', dom('a', {
              onclick: choosename,
              attributes: {
                href: '#'
              }
            }, name));
          })), dom('.actions', [
            dom('a.action', {
              onclick: cancelRename,
              attributes: {
                href: '#'
              }
            }, '⤺  Cancel'), ((params != null ? params.name : void 0) != null) && params.name.replace(/\s{2,}/g, ' ').trim() !== edited.name ? dom('a.action.primary', {
              onclick: rename,
              attributes: {
                href: '#'
              }
            }, '✓  Change') : void 0
          ])
        ] : [
          dom('h2', dom('a', {
            onclick: toggle('name'),
            attributes: {
              href: '#'
            }
          }, [edited.name, dom('small', 'CHANGE NAME')])), dom('.grid', [
            dom("a.booking.selection" + (editing === 'start' ? '.selected' : ''), {
              onclick: toggle('start'),
              attributes: {
                href: '#'
              }
            }, [dom('.booking-dates', [dom('small', 'ARRIVE'), ' ⋅ ', edited.start.format(nicedate)])]), dom("a.booking.selection" + (editing === 'end' ? '.selected' : ''), {
              onclick: toggle('end'),
              attributes: {
                href: '#'
              }
            }, [dom('.booking-dates', [dom('small', 'LEAVE'), ' ⋅ ', edited.end.format(nicedate)])])
          ]), editing === 'start' ? dom('h2', '← Select arrival date') : editing === 'end' ? dom('h2', '← Select leaving date') : editing === 'nothing' ? dom('.actions', [
            !haschanges ? [
              dom('a.action', {
                onclick: beginDeleteBooking,
                attributes: {
                  href: '#'
                }
              }, '⌫  Delete'), dom('a.action', {
                attributes: {
                  href: '/'
                }
              }, '✕  Close')
            ] : [
              dom('a.action', {
                onclick: cancelChanges,
                attributes: {
                  href: '#'
                }
              }, '⤺  Cancel'), dom('a.action.primary', {
                onclick: saveChanges,
                attributes: {
                  href: '#'
                }
              }, '✓  Update')
            ]
          ]) : void 0
        ]
      ])
    ]);
  }
}));
