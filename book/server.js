// Generated by CoffeeScript 1.10.0
var baby, buildtimeline, callbacks, chrono, fs, islocked, moment, readbookings, shortid, simpledate, writebookings;

fs = require('fs');

baby = require('babyparse');

shortid = require('shortid');

moment = require('moment-timezone');

chrono = require('chronological');

moment = chrono(moment);

simpledate = 'YYYY-MM-DD';

buildtimeline = require('./buildtimeline');

islocked = false;

callbacks = [];

readbookings = function(cb) {
  return fs.readFile('./data/bookings.csv', 'utf-8', function(err, data) {
    var i, len, r, ref, res, rows;
    if (err != null) {
      return cb(err);
    }
    rows = baby.parse(data, {
      header: true,
      skipEmptyLines: true
    });
    res = {};
    ref = rows.data;
    for (i = 0, len = ref.length; i < len; i++) {
      r = ref[i];
      res[r.id] = r;
    }
    return cb(null, res);
  });
};

writebookings = function(events, cb) {
  events = Object.keys(events).map(function(id) {
    return events[id];
  });
  return fs.writeFile('./data/bookings.csv', baby.unparse(events), cb);
};

module.exports = function(app) {
  app.post('/v0/addbooking', function(req, res) {
    return readbookings(function(err, events) {
      var id;
      id = shortid.generate();
      events[id] = {
        id: id,
        name: req.body.name,
        start: req.body.start,
        end: req.body.end
      };
      return writebookings(events, function(err) {
        if (err != null) {
          if (err.stack != null) {
            console.error(err.stack);
          } else {
            console.error(err);
          }
          return res.status(500).send(err);
        }
        return res.send({
          id: id
        });
      });
    });
  });
  app.post('/v0/deletebooking', function(req, res) {
    return readbookings(function(err, events) {
      delete events[req.body.id];
      return writebookings(events, function(err) {
        if (err != null) {
          if (err.stack != null) {
            console.error(err.stack);
          } else {
            console.error(err);
          }
          return res.status(500).send(err);
        }
        return res.send({
          id: req.body.id
        });
      });
    });
  });
  return app.post('/v0/changebooking', function(req, res) {
    return readbookings(function(err, events) {
      var booking;
      if (events[req.body.id] == null) {
        return res.status(400).send('Booking not found');
      }
      booking = events[req.body.id];
      booking.name = req.body.name;
      booking.start = req.body.start;
      booking.end = req.body.end;
      return writebookings(events, function(err) {
        if (err != null) {
          if (err.stack != null) {
            console.error(err.stack);
          } else {
            console.error(err);
          }
          return res.status(500).send(err);
        }
        return res.send({
          id: req.body.id
        });
      });
    });
  });
};

module.exports.query = function(req, store) {
  return store.use('bookings', function(params, cb) {
    return readbookings(function(err, events) {
      var timeline;
      if (err != null) {
        return cb(err);
      }
      timeline = buildtimeline(events);
      return cb(null, {
        events: events,
        timeline: timeline
      });
    });
  });
};
