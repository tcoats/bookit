// Generated by CoffeeScript 1.10.0
var baby, buildtimeline, callbacks, chrono, fs, islocked, lock, moment, readbookings, release, simpledate;

fs = require('fs');

baby = require('babyparse');

moment = require('moment-timezone');

chrono = require('chronological');

moment = chrono(moment);

simpledate = 'YYYY-MM-DD';

buildtimeline = require('./buildtimeline');

islocked = false;

callbacks = [];

lock = function(cb) {
  if (islocked) {
    callbacks.push(cb);
    return;
  }
  islocked = true;
  callbacks = [];
  return cb();
};

release = function(cb) {
  var _callbacks, callback, i, len, results;
  if (!islocked) {
    return cb();
  }
  islocked = true;
  _callbacks = callbacks;
  callbacks = [];
  cb();
  results = [];
  for (i = 0, len = _callbacks.length; i < len; i++) {
    callback = _callbacks[i];
    results.push(callback());
  }
  return results;
};

readbookings = function(cb) {
  return fs.readFile('./data/bookings.csv', 'utf-8', function(err, data) {
    var i, len, r, ref, res, rows;
    if (err != null) {
      return cb(err);
    }
    rows = baby.parse(data, {
      header: true,
      skipEmptyLines: true
    });
    res = {};
    ref = rows.data;
    for (i = 0, len = ref.length; i < len; i++) {
      r = ref[i];
      res[r.id] = r;
    }
    return cb(null, res);
  });
};

module.exports = function(app) {};

module.exports.query = function(req, store) {
  return store.use('bookings', function(params, cb) {
    return readbookings(function(err, events) {
      var timeline;
      if (err != null) {
        return cb(err);
      }
      timeline = buildtimeline(events);
      return cb(null, {
        events: events,
        timeline: timeline
      });
    });
  });
};
