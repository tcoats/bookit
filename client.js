// Generated by CoffeeScript 1.10.0
var Store, component, dom, dynamic, exe, fn, hostname, hostnameparts, hub, i, inject, j, len, len1, localstore, odoql, p, page, pods, ref, ref1, relay, request, root, route, router, scene, subdomain;

ref = require('odojs'), component = ref.component, hub = ref.hub, dom = ref.dom;

inject = require('injectinto');

odoql = require('odoql/odojs');

component.use(odoql);

hub = hub();

request = require('superagent');

dynamic = require('odoql-exe/dynamic');

Store = require('odoql-store');

localstore = Store({
  name: 'localstore'
});

exe = require('odoql-exe');

exe = exe({
  hub: hub
}).use(require('odoql-localstorage')).use(require('odoql-http')).use(require('odoql-csv')).use(localstore).use(dynamic(function(keys, queries, cb) {
  return request.post('/query').send({
    q: queries
  }).set('Accept', 'application/json').end(function(err, res) {
    var i, key, len, result;
    if (err != null) {
      return cb(err);
    }
    if (!res.ok) {
      return cb(new Error(res.text));
    }
    result = {};
    for (i = 0, len = keys.length; i < len; i++) {
      key = keys[i];
      result[key] = res.body[key];
    }
    return cb(null, result);
  });
}));

pods = [require('./book/')];

relay = require('odo-relay');

root = document.querySelector('#root');

router = require('./client/router');

scene = relay(root, router, exe, {
  queries: window.__queries,
  state: window.__state,
  hub: hub
});

route = require('odo-route');

page = require('page');

hostname = window.location.hostname;

hostnameparts = hostname.split('.');

subdomain = hostnameparts.length === 3 ? hostnameparts[0] : null;

page('*', function(e, next) {
  scene.clearParams();
  if (window.ga != null) {
    window.ga('send', 'pageview', e.path);
  }
  next();
  return window.scrollTo(0, 0);
});

ref1 = route.routes();
fn = function(route) {
  return page(route.pattern, function(e, next) {
    var callednext, context, result;
    context = {
      hostname: hostname,
      subdomain: subdomain,
      url: e.pathname,
      params: e.params,
      querystring: e.querystring
    };
    callednext = false;
    result = route.cb(context, function() {
      callednext = true;
      return next();
    });
    if (!callednext) {
      return scene.update(result);
    }
  });
};
for (i = 0, len = ref1.length; i < len; i++) {
  route = ref1[i];
  fn(route);
}

hub.all(function(e, description, p, cb) {
  var j, len1, n, ref2;
  ref2 = ['odo', 'Odo', 'localdb', 'remotedb', 'socket'];
  for (j = 0, len1 = ref2.length; j < len1; j++) {
    n = ref2[j];
    if (description.indexOf(n) !== -1) {
      return cb();
    }
  }
  if (description === 'update') {
    return cb();
  }
  console.log(description, p);
  return cb();
});

for (j = 0, len1 = pods.length; j < len1; j++) {
  p = pods[j];
  p(hub, scene, localstore);
}

hub.every('update', function(p, cb) {
  var ref2, ref3;
  if (p == null) {
    p = {};
  }
  p.version = (ref2 = (ref3 = scene.params()) != null ? ref3.version : void 0) != null ? ref2 : 0;
  p.version++;
  scene.update(p);
  return cb();
});

page.start();
